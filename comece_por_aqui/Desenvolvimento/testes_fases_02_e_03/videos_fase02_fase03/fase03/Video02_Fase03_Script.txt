Olá Márcia, este é o vídeo 02 da série de vídeos sobre a fase 03.

Nesse vídeo, irei tratar sobre o procedimento:

********12.3. Procedimento: Como tirar fotos na ESP32-CAM e 
armazenar no Google Drive ************************************

1.Separe os materiais: 1 módulo ESP32-CAM com câmera OV2640 2MP,
 1 módulo conversor USB TTL CP2101 Serial RS232, 1 jumper vermelho, 
1 jumper preto, 1 jumper laranja, 1 jumper azul, 1 jumper roxo, cabo mini USB.
 Monte o circuito conforme a imagem 22 adiante:

Figura 22 – Montagem do circuito ESP32-CAM com conversor TTL CP2101
(é a figura do Fritzing)

Observe o sistema físico entre a ESP32 e o conversor FTDI RS232FL.

2. Configure o Google Drive. Faça o login no Google Drive através do Gmail e 
abra a pasta raíz. Dentro dela, crie a pasta: ESP32-CAM. Após, vá em Meu Drive, 
Mais, Scripte do Google Apps.

 Cole o código adiante:

function doPost(e) { var imagem = Utilities.base64Decode(e.parameters.data);
//Decofica a imagem 
var nome_do_Arquivo = Utilities.formatDate(new Date(), 
"GMT-3", "dd/MM/yyyy-HH:mm:ss")+".jpg"; 
//Define nome da imagem com a data e o horário 
var salvar_imagem = Utilities.newBlob
(imagem, e.parameters.mimetype, nome_do_Arquivo);

var pasta, pastas = DriveApp.getFoldersByName("ESP32-CAM"); 
//Verifica se a pasta já existe 
if (pastas.hasNext())
 { pasta = pastas.next(); }
 else { 
pasta = DriveApp.createFolder("ESP32-CAM"); 
//Cria a pasta
 }
 var Arquivar = pasta.createFile(salvar_imagem); 

//Salva o arquivo na pasta

 return ContentService.createTextOutput('Completo') 
}

3.Faça a publicação do código descrito no passo 2, importe como aplicativo web, 
salve o código. Realize o deploy em modo anônimo, analise as permissões em avanço
 e peça para avançar. A url que for gerada, salve em um bloco de notas.
https://script.google.com/macros/s/AKfycbx3Yw3vKdp9GuNdxeeWvZVtPMBS-bmE38MbSUpzOIu7gULcfUAU/exec

4. Em seu computador, instale a Biblioteca Base64, escolha um local para exportação
 ao qual deve ser o mesmo no qual será armazenado o projeto de tirar fotos. 
Exporte os arquivos: Base64.cpp e Base64.h

5.Abra o software Arduíno IDE, vá em Arquivos, Preferências, coloque o link
 em URLs adicionais para gerenciadores de placas: 
https://dl.espressif.com/dl/package_esp32_index.json e clique em OK.
6.Dentro do Arduíno IDE, vá em Ferramentas, Placas, Gerenciador de Placas,
 pesquise ESP32 e instale.


7.Depois da instalação bem sucedida, vá em: Ferramentas, Placa, deixe selecionado 
o AI Thinker ESP32-CAM.

 8.Para o código que será montado no Arduíno IDE, adicione 
as variáveis: ssid e password com as credenciais de nome e senha de rede conforme
 abaixo.
//Dados para conexão com a rede Wi-fi
const char* ssid = "Lunara"; //Insira o SSID da rede
const char* password = "d9-48Z11"; //Insira a senha da rede

9.Troque o XXXX pelos caracteres conforme o link guardado do item 3. 

//Inserir endereço gerado pelo Google Drive String
 meuScript = "/macros/s/AKfycbx3Yw3vKdp9GuNdxeeWvZVtPMBS-bmE38MbSUpzOIu7gULcfUAU/exec";
 
10.Cole no Sketch o código adiante, com as alterações realizadas nos itens 8 e 9.


//Bibliotecas utilizadas
 #include <Wi-Fi.h> 
 #include <Wi-FiClientSecure.h>
 #include "soc/soc.h" 
 #include "soc/rtc_cntl_reg.h"
 #include "Base64.h" 
#include "esp_camera.h" 
//Dados para conexão com a rede Wi-fi
 const char* ssid = "Lunara"; //Insira o SSID da rede
const char* password = "d9-48Z11"; //Insira a senha da rede

//Dados para conexão com o Google Drive
 const char* host = "script.google.com";

//Inserir endereço gerado pelo Google Drive 
String  meuScript = "/macros/s/AKfycbx3Yw3vKdp9GuNdxeeWvZVtPMBS-bmE38MbSUpzOIu7gULcfUAU/exec";
 //Dados para o arquivo de imagem 
String nomedoArquivo = "filename=ESP32-CAM.jpg";
 String mimeType = "&mimetype=image/jpeg"; 
String Imagem = "&data="; int tempo_espera = 10000;
 //Espera 10 segundos para o Google responder 
//Definição dos pinos 
#define PWDN_GPIO_NUM 32
 #define RESET_GPIO_NUM -1 
#define XCLK_GPIO_NUM 0 
#define SIOD_GPIO_NUM 26 
#define SIOC_GPIO_NUM 27 
#define Y9_GPIO_NUM 35 
#define Y8_GPIO_NUM 34 
#define Y7_GPIO_NUM 39 
#define Y6_GPIO_NUM 36 
#define Y5_GPIO_NUM 21 
#define Y4_GPIO_NUM 19 
#define Y3_GPIO_NUM 18 
#define Y2_GPIO_NUM 5 
#define VSYNC_GPIO_NUM 25 
#define HREF_GPIO_NUM 23 
#define PCLK_GPIO_NUM 22 
#define flash 4

 void setup()
{
WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); 
Serial.begin(115200); 
delay(100); 
Wi-Fi.mode(WI-FI_STA); 
Serial.println(""); 
Serial.print("Conectando na rede: "); 
Serial.println(ssid);
 Wi-Fi.begin(ssid, password);
 while (Wi-Fi.status() != WL_CONNECTED)
 { 
Serial.print("."); delay(500); 
} 

//Definindo flash da câmera

 pinMode(flash,OUTPUT); 
Serial.println("Conectado!");
 Serial.println(); 
Serial.print("endereço STAIP: ");
 Serial.println(Wi-Fi.localIP()); 
Serial.println(); 

//Configuração do pinos da câmera
 camera_config_t config;
 config.ledc_channel = LEDC_CHANNEL_0; 
config.ledc_timer = LEDC_TIMER_0; 
config.pin_d0 = Y2_GPIO_NUM;

config.pin_d1 = Y3_GPIO_NUM;
 config.pin_d2 = Y4_GPIO_NUM;
 config.pin_d3 = Y5_GPIO_NUM; 
config.pin_d4 = Y6_GPIO_NUM;
 config.pin_d5 = Y7_GPIO_NUM;
 config.pin_d6 = Y8_GPIO_NUM; 
config.pin_d7 = Y9_GPIO_NUM;
 config.pin_xclk = XCLK_GPIO_NUM; 
config.pin_pclk = PCLK_GPIO_NUM; 
config.pin_vsync = VSYNC_GPIO_NUM;
 config.pin_href = HREF_GPIO_NUM;
 config.pin_sscb_sda = SIOD_GPIO_NUM;
 config.pin_sscb_scl = SIOC_GPIO_NUM; 
config.pin_pwdn = PWDN_GPIO_NUM;
 config.pin_reset = RESET_GPIO_NUM; 
config.xclk_freq_hz = 20000000;
 config.pixel_format = PIXFORMAT_JPEG;
 config.frame_size = FRAMESIZE_VGA;
 config.jpeg_quality = 4;
 config.fb_count = 1; 
esp_err_t err = esp_camera_init(&config);
 //Inicialização da câmera 
if (err != ESP_OK) 
{ 
Serial.printf("O início da câmera falhou com erro 0x%x", err);
//Informa erro se a câmera não for iniciada corretamente
 delay(1000); 
ESP.restart();
//Reinicia o ESP 
} 
}

void loop() { 
Captura_Imagem();
 //Captura e envia imagem delay(1000);
 }

 void Captura_Imagem() 
{ 
Serial.println("Conectando ao " + String(host));
 Wi-FiClientSecure client; 
if (client.connect(host, 443)) 
{ //Conectando no Google 
Serial.println("Conexão com sucesso!");
 camera_fb_t * fb = NULL; 
digitalWrite(flash,HIGH);
 delay(100);
 fb = esp_camera_fb_get(); 
//Função que captura imagem na ESP
 digitalWrite(flash,LOW);
 delay(100); 
if(!fb) {
 Serial.println("Falha ao capturar imagem!"); 
delay(1000);

ESP.restart();
 return; 
} 

char *input = (char *)fb->buf; 
char output[base64_enc_len(3)];
 String imageFile = ""; 
for (int i=0;i<fb->len;i++) 
{
 base64_encode(output, (input++), 3); 
if (i%3==0) imageFile += urlencode(String(output)); 
} 
String Data = nomedoArquivo+mimeType+Imagem; 
esp_camera_fb_return(fb); 
Serial.println("Enviando imagem capturada ao Google Drive."); 
client.println("POST " + meuScript + " HTTP/1.1"); 
client.println("Host: " + String(host)); 
client.println("Content-Length: " + String(Data.length()+imageFile.length())); 
client.println("Content-Type: application/x-www-form-urlencoded"); 
client.println(); client.print(Data); 
int Index; 
for (Index = 0; Index < imageFile.length(); Index = Index+1000)
 { client.print(imageFile.substring(Index, Index+1000));

} Serial.println("Aguardando resposta.");
 long int tempo_inicio = millis(); 
while (!client.available())
 { //Aguarda resposta do envio da imagem 
Serial.print("."); delay(100);
 if ((tempo_inicio+tempo_espera) < millis()) 
{ 
Serial.println(); 
Serial.println("Sem Resposta."); 
break; } }
 Serial.println();
 while (client.available()) { 
Serial.print(char(client.read())); 
//Mostra na tela a resposta 
} 
} 
else 
{ 
Serial.println("Conexão ao " + String(host) + " falhada."); 
} client.stop(); } 
String urlencode(String str) 
//Função de codificação 
{ 
String encodedString=""; 
char c;
 char code0;
char code1;
 char code2;

 for (int i =0; i < str.length(); i++)
{
 c=str.charAt(i); 
if (c == ' ')
{ 
encodedString+= '+'; 
}
 else if (isalnum(c))
{ encodedString+=c; }
 else{ 
code1=(c & 0xf)+'0';
 if ((c & 0xf) >9)
{ code1=(c & 0xf) - 10 + 'A'; }
 c=(c>>4)&0xf; code0=c+'0'; 
if (c > 9){ code0=c - 10 + 'A'; }
 code2='\0'; encodedString+='%'; 
encodedString+=code0;
 encodedString+=code1;
 } 
yield(); 
} 
return encodedString;
 }

11. Salve o código e feche o programa.
 Abra novamente o Arduíno IDE com o arquivo,
 e verifique se aparecem em novas abas os arquivos:Base64.cpp
 e Base64.h

 12.Verifique na montagem do circuito se o pino 
GPI0 está conectado ao GND. 
Conecte o cabo usb do conversor para ver que porta
 aparece no Arduíno IDE e a selecione
em Ferramentas, Porta.
 Faça o upload do código,
 quando aparecer “Connecting…” 
aperte o botão RST fisicamente abaixo da ESP32-CAM.
 Se aparecer: “Hard reseting via RTS pin…” 
significa que o código foi carregado com êxito.

 13. Desconecte o pino GPI0 do GND,
 aperte o botão RST para que o código comece a rodar no ESP32-CAM. 
Aguarde a foto carregar na pasta da ESP32-CAM dentro do Google Drive.